import { exec } from 'child_process';

interface Vulnerability {
  severity: 'low' | 'moderate' | 'high' | 'critical';
}

interface AuditReport {
  advisories: Record<string, Vulnerability>;
}

/**
 * Gets the vulnerability score of a package using npm audit.
 * @param pkg - The name of the package to check.
 * @returns A promise that resolves to the highest severity score of the package's vulnerabilities.
 */
export const getVulnerabilityScore = async (pkg: string): Promise<number> => {
  return new Promise((resolve, reject) => {
    exec(`npm audit --json`, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error executing npm audit for ${pkg}:`, stderr);
        return reject(error);
      }

      const auditReport: AuditReport = JSON.parse(stdout);
      const vulnerabilities = auditReport.advisories || {};
      const highestSeverity = Object.values(vulnerabilities).reduce((max: number, vuln: Vulnerability) => {
        const severityScore = {
          low: 1,
          moderate: 4,
          high: 7,
          critical: 10
        }[vuln.severity] || 0;
        return Math.max(max, severityScore);
      }, 0);
      resolve(highestSeverity);
    });
  });
};